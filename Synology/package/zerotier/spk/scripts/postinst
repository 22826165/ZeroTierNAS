#!/bin/sh

ZT_HOME_DIR="/var/lib/zerotier-one"
echo "$(date) INSTALL: Unpacked to: " ${SYNOPKG_PKGDEST} >> /opt/var/log/zerotier-one.log ;

# select appropriate binary
mtype=$(uname -m)
if [ ${mtype} == 'x86_64' ];
	then
		mv ${SYNOPKG_PKGDEST}/bin/zerotier-one.x86_64 ${SYNOPKG_PKGDEST}/bin/zerotier-one
elif [[ ${mtype} == 'i386' ]] || [[ ${mtype} == 'i486' ]] || [[ ${mtype} == 'i586' ]] || [[ ${mtype} == 'i686' ]];
	then
		mv ${SYNOPKG_PKGDEST}/bin/zerotier-one.x86 ${SYNOPKG_PKGDEST}/bin/zerotier-one
elif [[ ${mtype} == 'armv5tel' ]]
	then 
		mv ${SYNOPKG_PKGDEST}/bin/zerotier-one.armv5tel ${SYNOPKG_PKGDEST}/bin/zerotier-one
else
        mv ${SYNOPKG_PKGDEST}/bin/zerotier-one.armhf ${SYNOPKG_PKGDEST}/bin/zerotier-one
fi

# set permissions
echo "$(date) INSTALL: setting permissions" >> /opt/var/log/zerotier-one.log ;
chmod 755 ${SYNOPKG_PKGDEST}/bin/zerotier-one

# create (and possibly clean out home dir)
echo "$(date) INSTALL: removing old /var/lib/zerotier-one files" >> /opt/var/log/zerotier-one.log ;
mkdir -p ${ZT_HOME_DIR}
rm -rf /var/lib/zerotier-one/devicemap

# create new symlinks (put them in all the places!)
echo "$(date) INSTALL: creating new symlinks" >> /opt/var/log/zerotier-one.log ;
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/sbin/zerotier-one
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/sbin/zerotier-cli
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/sbin/zerotier-idtool

ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/bin/zerotier-one
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/bin/zerotier-cli
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/bin/zerotier-idtool

ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/local/sbin/zerotier-one
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/local/sbin/zerotier-cli
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/local/sbin/zerotier-idtool

ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/local/bin/zerotier-one
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/local/bin/zerotier-cli
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /usr/local/bin/zerotier-idtool

ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /var/lib/zerotier-one/zerotier-one
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /var/lib/zerotier-one/zerotier-cli
ln -s ${SYNOPKG_PKGDEST}/bin/zerotier-one /var/lib/zerotier-one/zerotier-idtool

# put a copy of the watchdog script in the home dir
echo "$(date) INSTALL: adding watchdog script to /var/lib/zerotier-one" >> /opt/var/log/zerotier-one.log ;
cp -f ${SYNOPKG_PKGDEST}/bin/ztui_watchdog.sh ${ZT_HOME_DIR}/ztui_watchdog.sh

# nginx proxy config
echo "$(date) INSTALL: setting nginx reverse proxy config" >> /opt/var/log/zerotier-one.log ;
cp -f ${SYNOPKG_PKGDEST}/dsm/dsm.zerotier.conf /usr/local/etc/nginx/conf.d/dsm.zerotier.conf
# for nginx to reload new reverse proxy conf file
nginx -s reload

# load TUN kernel module
SERVICE="zerotier"
ZEROTIER_MODULE="tun.ko"
BIN_SYNOMODULETOOL="/usr/syno/bin/synomoduletool"

# Make device if not present (not devfs)
echo "$(date) INSTALL: creating /dev/net/tun device" >> /opt/var/log/zerotier-one.log ;
if ( [ ! -c /dev/net/tun ] ) then
		# Make /dev/net directory if needed
		if ( [ ! -d /dev/net ] ) then
    		mkdir -m 755 /dev/net
		fi
		mknod /dev/net/tun c 10 200
fi

# Load TUN kernel module
echo "$(date) INSTALL: loading TUN kernel module" >> /opt/var/log/zerotier-one.log ;
if [ -x ${BIN_SYNOMODULETOOL} ]; then
	$BIN_SYNOMODULETOOL --insmod $SERVICE ${ZEROTIER_MODULE}
else
	/sbin/insmod /lib/modules/${ZEROTIER_MODULE}
fi

exit 0
